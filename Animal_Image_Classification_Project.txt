Animal Image Classification Project
==================================

Overview
--------
This project implements an image classification model to categorize images of dogs, cats, and snakes using a convolutional neural network (CNN) based on ResNet50 with transfer learning in Keras. The project is developed in a Jupyter Notebook and hosted on GitHub at https://github.com/rathishTharusha/animal-image-classification-v1. It includes data preprocessing, model training with data augmentation, fine-tuning, evaluation, and visualization of results.

Dataset
-------
- Source: Animal Image Classification Dataset from Kaggle (https://www.kaggle.com/datasets/borhanitrash/animal-image-classification-dataset)
- Structure: Images are organized in an `Animals` folder with subfolders `dogs`, `cats`, and `snakes`.
- Size: 2000 training images, 50 validation images, 50 test images across three classes.
- Preprocessing: Images are resized to 128x128 pixels. Data augmentation includes width/height shift (0.1), shear (0.1), zoom (0.2), horizontal flip, and nearest fill mode.

Methodology
-----------
1. Data Preparation:
   - The dataset is split into training (80%), validation (10%), and test (10%) sets using `ImageDataGenerator` with `validation_split` and manual test set splitting.
   - Sample images from each class are visualized to verify data integrity.
   - Data augmentation is applied to the training set to enhance model robustness.

2. Model Architecture:
   - Base Model: ResNet50 pre-trained on ImageNet, with top layers removed.
   - Custom Layers: GlobalAveragePooling2D, Dropout (0.5), Dense (128 units, ReLU), Dense (3 units, softmax).
   - Input images are processed at 128x128 pixels with a batch size of 32.

3. Training:
   - Initial Training: ResNet50 layers are frozen, and the model is trained for 25 epochs using the Adam optimizer (learning rate 0.0001), categorical crossentropy loss, and accuracy metrics.
   - Callbacks: EarlyStopping (monitor `val_loss`, patience=5), ModelCheckpoint (save best model as `best_model.h5`), ReduceLROnPlateau (factor=0.5, patience=2).
   - Fine-Tuning: The top 10 layers of ResNet50 are unfrozen, and the model is retrained for 10 epochs with a lower learning rate (1e-6).

4. Evaluation:
   - The model is evaluated on the test set using accuracy, precision, recall, and F1-score.
   - A confusion matrix is generated using `seaborn.heatmap` to visualize classification performance.
   - Sample predictions are displayed in a 2x5 grid, showing true and predicted labels for test images.

5. Model Saving:
   - The trained model is saved as `final_model.h5` in HDF5 format, with a note to consider the native Keras format (`final_model.keras`) due to HDF5 being legacy.

Results
-------
- Test Accuracy: Approximately 94% (based on validation accuracy of 0.9444 in epoch 16).
- Metrics: Precision, recall, and F1-score are computed but require the notebook's classification report for exact values.
- Visualizations: Training/validation loss and accuracy curves are saved as `training_plots.png`. A confusion matrix and sample predictions are included in the notebook.

Repository
----------
The complete project, including the Jupyter Notebook (`animal_classifier.ipynb`), model file (`final_model.h5`, if uploaded), training history (`training_history.csv`), and visualizations (`training_plots.png`), is available at:
https://github.com/rathishTharusha/animal-image-classification-v1

Dependencies
------------
- Python libraries: tensorflow, keras, matplotlib, numpy, pandas, scikit-learn, seaborn, kaggle

Future Work
-----------
- Fine-tune additional ResNet50 layers for improved accuracy.
- Experiment with alternative architectures like EfficientNet or MobileNet.
- Deploy the model as a web application using Flask or Streamlit.
- Implement data cleaning to handle potential corrupted images or outliers.

Citations
---------
- Dataset: Animal Image Classification Dataset (https://www.kaggle.com/datasets/borhanitrash/animal-image-classification-dataset)
- Keras: Keras Documentation (https://keras.io/)
- Kaggle API: Kaggle API Documentation (https://github.com/Kaggle/kaggle-api)